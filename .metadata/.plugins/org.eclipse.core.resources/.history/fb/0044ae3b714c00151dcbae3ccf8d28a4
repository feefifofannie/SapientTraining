package com.sapient.arraylist;

import java.lang.reflect.Array;
import java.util.ArrayList;

import java.util.Iterator;

public class ArrayLists {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		oldStyle();
	}
	
	public void arrayListDemo() {
		 // Create an array list. 
	    ArrayList<String> al = new ArrayList<String>(); 
	     
	    System.out.println("Initial size of al: " + al.size()); 
	 
	    // Add elements to the array list. 
	    al.add("C"); 
	    al.add("A"); 
	    al.add("E"); 
	    al.add("B"); 
	    al.add("D"); 
	    al.add("F"); 
	    al.set(1, "A2"); 
	 
	    System.out.println("Size of al after additions: " + al.size()); 
	 
	    // Display the array list. 
	    System.out.println("Contents of al: " + al); 
	 
	    // Remove elements from the array list. 
	    al.add("F"); 
	    al.remove(2); 
	 
	    System.out.println("Size of al after deletions: " + al.size()); 
	    System.out.println("Contents of al: " + al); 
	}
	
	public void arrayListToArray() {
		   // Create an array list. 
	    ArrayList<Integer> al = new ArrayList<Integer>();  
	      
	    // Add elements to the array list. 
	    al.add(1);  
	    al.add(2);  
	    al.add(3);  
	    al.add(4);  
	  
	    System.out.println("Contents of al: " + al);  
	  
	    // Get the array. 
	    Integer ia[] = new Integer[al.size()];  
	    ia = al.toArray(ia); 
	  
	    int sum = 0;  
	  
	    // Sum the array. 
	    for(int i : ia){
		 sum += i;  
		}
	  
	    System.out.println("Sum is: " + sum);  
	}
	
	public static void arrayIterator() {
	    ArrayList<String> list = new ArrayList<String>(); 
	 
	    list.add("one"); 
	    list.add("two"); 
	    list.add("three"); 
	    list.add("four"); 
	 
	    // Notice that Iterator is also generic. 
	    Iterator<String> itr = list.iterator(); 
	 
	    while(itr.hasNext()) { 
	      String str =(String) itr.next(); 
	 
	      System.out.println(str + " is " + str.length() + " chars long."); 
	    }
	}
	
	public static void oldStyle() {
		ArrayList<Object> list = new ArrayList<Object>(); 
		 
		    // These lines store strings, but any type of object 
		    // can be stored.  In old-style code, there is no  
		    // convenient way restrict the type of objects stored 
		    // in a collection 
		    list.add("one"); 
		    list.add("two"); 
		    list.add(3); 
		    list.add("four"); 
		 
		    Iterator<Object> itr = list.iterator(); 
		    while(itr.hasNext()) { 
		 
		      // To retrieve an element, an explicit type cast is needed 
		      // because the collection stores only Object. 
		      String str = itr.next().toString(); // explicit cast needed here. 

		 
		      System.out.println(str + " is " + str.length() + " chars long."); 
		    }
	}

}
